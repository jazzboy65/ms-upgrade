plugins {
    id ("org.springframework.boot") version "${springBootVersion}"
    id ("io.spring.dependency-management") version "${springDependencyVersion}"
    id ("org.liquibase.gradle") version "${liquibaseVersion}"
    id ("org.openapi.generator") version "${generatorVersion}"
    id 'java'
}

group = "alexgordeeff"
version = project.appVersion

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.javaVersion)
    }
}

ext.springdocVersion = project.springdocVersion

dependencies {
    implementation ("org.springframework.boot:spring-boot-starter-web")
    implementation ("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation ("org.projectlombok:lombok")
    implementation ("org.liquibase:liquibase-core")
    implementation ("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}")
    runtimeOnly ("org.postgresql:postgresql")
    testImplementation ("org.springframework.boot:spring-boot-starter-test")
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "${encoding}"
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/ms-upgrade-api.yaml"
    outputDir = "$projectDir/generated/openapi/src/main/java"
    apiPackage = "clients.api"
    modelPackage = "clients.model"
    configOptions = [
            dateLibrary: "java8",
            library    : "spring-boot"
    ]
}

tasks.named('compileJava') {
    dependsOn 'openApiGenerate'
}

sourceSets {
    main.java.srcDirs += "$buildDir/generated/openapi/src/main/java"
}